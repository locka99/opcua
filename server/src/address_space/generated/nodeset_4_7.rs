// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2020 Adam Lock
// This file was autogenerated from Opc.Ua.NodeSet2.Part4.xml by tools/schema/gen_address_space.js
// DO NOT EDIT THIS FILE
#![rustfmt::skip]

#[allow(unused_imports)]
use std::{convert::TryFrom, str::FromStr};

#[allow(unused_imports)]
use crate::{
    address_space::{EventNotifier, types::*},
    prelude::{DataTypeId, ExtensionObject, LocalizedText, NodeId, ReferenceTypeId, service_types::Argument, UAString, Variant}
};

#[allow(unused_variables)]
pub fn populate_address_space(address_space: &mut AddressSpace) {
    add_datatype_1(address_space);
    add_datatype_2(address_space);
    add_datatype_3(address_space);
    add_datatype_4(address_space);
    add_datatype_5(address_space);
    add_datatype_6(address_space);
    add_datatype_7(address_space);
    add_datatype_8(address_space);
    add_datatype_9(address_space);
    add_datatype_10(address_space);
    add_datatype_11(address_space);
    add_datatype_12(address_space);
    add_datatype_13(address_space);
    add_datatype_14(address_space);
    add_datatype_15(address_space);
    add_datatype_16(address_space);
    add_datatype_17(address_space);
    add_datatype_18(address_space);
    add_datatype_19(address_space);
    add_datatype_20(address_space);
    add_datatype_21(address_space);
    add_datatype_22(address_space);
    add_datatype_23(address_space);
    add_datatype_24(address_space);
    add_datatype_25(address_space);
    add_datatype_26(address_space);
    add_datatype_27(address_space);
    add_datatype_28(address_space);
    add_datatype_29(address_space);
    add_datatype_30(address_space);
    add_datatype_31(address_space);
    add_datatype_32(address_space);
    add_datatype_33(address_space);
    add_datatype_34(address_space);
    add_datatype_35(address_space);
    add_datatype_36(address_space);
    add_datatype_37(address_space);
    add_datatype_38(address_space);
    add_datatype_39(address_space);
    add_datatype_40(address_space);
    add_datatype_41(address_space);
    add_datatype_42(address_space);
    add_datatype_43(address_space);
    add_datatype_44(address_space);
    add_datatype_45(address_space);
    add_datatype_46(address_space);
    add_datatype_47(address_space);
    add_datatype_48(address_space);
    add_datatype_49(address_space);
    add_datatype_50(address_space);
    add_datatype_51(address_space);
    add_datatype_52(address_space);
    add_datatype_53(address_space);
    add_datatype_54(address_space);
    add_datatype_55(address_space);
    add_datatype_56(address_space);
    add_datatype_57(address_space);
    add_datatype_58(address_space);
    add_datatype_59(address_space);
    add_datatype_60(address_space);
    add_datatype_61(address_space);
    add_datatype_62(address_space);
    add_datatype_63(address_space);
    add_datatype_64(address_space);
    add_datatype_65(address_space);
    add_datatype_66(address_space);
    add_datatype_67(address_space);
    add_datatype_68(address_space);
    add_datatype_69(address_space);
    add_datatype_70(address_space);
    add_datatype_71(address_space);
    add_datatype_72(address_space);
    add_datatype_73(address_space);
    add_datatype_74(address_space);
    add_datatype_75(address_space);
    add_datatype_76(address_space);
    add_datatype_77(address_space);
    add_datatype_78(address_space);
    add_datatype_79(address_space);
    add_datatype_80(address_space);
    add_datatype_81(address_space);
    add_datatype_82(address_space);
    add_datatype_83(address_space);
    add_datatype_84(address_space);
    add_datatype_85(address_space);
    add_datatype_86(address_space);
    add_datatype_87(address_space);
    add_datatype_88(address_space);
    add_datatype_89(address_space);
    add_datatype_90(address_space);
    add_datatype_91(address_space);
    add_datatype_92(address_space);
    add_datatype_93(address_space);
    add_datatype_94(address_space);
    add_datatype_95(address_space);
    add_datatype_96(address_space);
    add_datatype_97(address_space);
    add_datatype_98(address_space);
    add_datatype_99(address_space);
    add_datatype_100(address_space);
}

fn add_datatype_1(address_space: &mut AddressSpace) {
    // DataType
    let name = "IssuedIdentityToken";
    let node_id = NodeId::new(0, 938);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 316), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_2(address_space: &mut AddressSpace) {
    // DataType
    let name = "RsaEncryptedSecret";
    let node_id = NodeId::new(0, 17545);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 24), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_3(address_space: &mut AddressSpace) {
    // DataType
    let name = "ActivateSessionRequest";
    let node_id = NodeId::new(0, 465);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_4(address_space: &mut AddressSpace) {
    // DataType
    let name = "ActivateSessionResponse";
    let node_id = NodeId::new(0, 468);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_5(address_space: &mut AddressSpace) {
    // DataType
    let name = "CloseSessionRequest";
    let node_id = NodeId::new(0, 471);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_6(address_space: &mut AddressSpace) {
    // DataType
    let name = "CloseSessionResponse";
    let node_id = NodeId::new(0, 474);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_7(address_space: &mut AddressSpace) {
    // DataType
    let name = "CancelRequest";
    let node_id = NodeId::new(0, 477);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_8(address_space: &mut AddressSpace) {
    // DataType
    let name = "CancelResponse";
    let node_id = NodeId::new(0, 480);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_9(address_space: &mut AddressSpace) {
    // DataType
    let name = "NodeAttributesMask";
    let node_id = NodeId::new(0, 348);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 11881), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 29), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_10(address_space: &mut AddressSpace) {
    // DataType
    let name = "NodeAttributes";
    let node_id = NodeId::new(0, 349);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_11(address_space: &mut AddressSpace) {
    // DataType
    let name = "ObjectAttributes";
    let node_id = NodeId::new(0, 352);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 349), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_12(address_space: &mut AddressSpace) {
    // DataType
    let name = "VariableAttributes";
    let node_id = NodeId::new(0, 355);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 349), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_13(address_space: &mut AddressSpace) {
    // DataType
    let name = "MethodAttributes";
    let node_id = NodeId::new(0, 358);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 349), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_14(address_space: &mut AddressSpace) {
    // DataType
    let name = "ObjectTypeAttributes";
    let node_id = NodeId::new(0, 361);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 349), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_15(address_space: &mut AddressSpace) {
    // DataType
    let name = "VariableTypeAttributes";
    let node_id = NodeId::new(0, 364);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 349), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_16(address_space: &mut AddressSpace) {
    // DataType
    let name = "ReferenceTypeAttributes";
    let node_id = NodeId::new(0, 367);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 349), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_17(address_space: &mut AddressSpace) {
    // DataType
    let name = "DataTypeAttributes";
    let node_id = NodeId::new(0, 370);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 349), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_18(address_space: &mut AddressSpace) {
    // DataType
    let name = "ViewAttributes";
    let node_id = NodeId::new(0, 373);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 349), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_19(address_space: &mut AddressSpace) {
    // DataType
    let name = "GenericAttributeValue";
    let node_id = NodeId::new(0, 17606);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_20(address_space: &mut AddressSpace) {
    // DataType
    let name = "GenericAttributes";
    let node_id = NodeId::new(0, 17607);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 349), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_21(address_space: &mut AddressSpace) {
    // DataType
    let name = "AddNodesItem";
    let node_id = NodeId::new(0, 376);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_22(address_space: &mut AddressSpace) {
    // DataType
    let name = "AddNodesResult";
    let node_id = NodeId::new(0, 483);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_23(address_space: &mut AddressSpace) {
    // DataType
    let name = "AddNodesRequest";
    let node_id = NodeId::new(0, 486);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_24(address_space: &mut AddressSpace) {
    // DataType
    let name = "AddNodesResponse";
    let node_id = NodeId::new(0, 489);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_25(address_space: &mut AddressSpace) {
    // DataType
    let name = "AddReferencesItem";
    let node_id = NodeId::new(0, 379);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_26(address_space: &mut AddressSpace) {
    // DataType
    let name = "AddReferencesRequest";
    let node_id = NodeId::new(0, 492);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_27(address_space: &mut AddressSpace) {
    // DataType
    let name = "AddReferencesResponse";
    let node_id = NodeId::new(0, 495);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_28(address_space: &mut AddressSpace) {
    // DataType
    let name = "DeleteNodesItem";
    let node_id = NodeId::new(0, 382);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_29(address_space: &mut AddressSpace) {
    // DataType
    let name = "DeleteNodesRequest";
    let node_id = NodeId::new(0, 498);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_30(address_space: &mut AddressSpace) {
    // DataType
    let name = "DeleteNodesResponse";
    let node_id = NodeId::new(0, 501);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_31(address_space: &mut AddressSpace) {
    // DataType
    let name = "DeleteReferencesItem";
    let node_id = NodeId::new(0, 385);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_32(address_space: &mut AddressSpace) {
    // DataType
    let name = "DeleteReferencesRequest";
    let node_id = NodeId::new(0, 504);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_33(address_space: &mut AddressSpace) {
    // DataType
    let name = "DeleteReferencesResponse";
    let node_id = NodeId::new(0, 507);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_34(address_space: &mut AddressSpace) {
    // DataType
    let name = "AttributeWriteMask";
    let node_id = NodeId::new(0, 347);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 15036), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 7), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_35(address_space: &mut AddressSpace) {
    // DataType
    let name = "BrowseDirection";
    let node_id = NodeId::new(0, 510);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 7603), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 29), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_36(address_space: &mut AddressSpace) {
    // DataType
    let name = "ViewDescription";
    let node_id = NodeId::new(0, 511);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_37(address_space: &mut AddressSpace) {
    // DataType
    let name = "BrowseDescription";
    let node_id = NodeId::new(0, 514);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_38(address_space: &mut AddressSpace) {
    // DataType
    let name = "BrowseResultMask";
    let node_id = NodeId::new(0, 517);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 11883), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 29), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_39(address_space: &mut AddressSpace) {
    // DataType
    let name = "ReferenceDescription";
    let node_id = NodeId::new(0, 518);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_40(address_space: &mut AddressSpace) {
    // DataType
    let name = "ContinuationPoint";
    let node_id = NodeId::new(0, 521);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 15), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_41(address_space: &mut AddressSpace) {
    // DataType
    let name = "BrowseResult";
    let node_id = NodeId::new(0, 522);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_42(address_space: &mut AddressSpace) {
    // DataType
    let name = "BrowseRequest";
    let node_id = NodeId::new(0, 525);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_43(address_space: &mut AddressSpace) {
    // DataType
    let name = "BrowseResponse";
    let node_id = NodeId::new(0, 528);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_44(address_space: &mut AddressSpace) {
    // DataType
    let name = "BrowseNextRequest";
    let node_id = NodeId::new(0, 531);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_45(address_space: &mut AddressSpace) {
    // DataType
    let name = "BrowseNextResponse";
    let node_id = NodeId::new(0, 534);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_46(address_space: &mut AddressSpace) {
    // DataType
    let name = "RelativePathElement";
    let node_id = NodeId::new(0, 537);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_47(address_space: &mut AddressSpace) {
    // DataType
    let name = "RelativePath";
    let node_id = NodeId::new(0, 540);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_48(address_space: &mut AddressSpace) {
    // DataType
    let name = "BrowsePath";
    let node_id = NodeId::new(0, 543);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_49(address_space: &mut AddressSpace) {
    // DataType
    let name = "BrowsePathTarget";
    let node_id = NodeId::new(0, 546);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_50(address_space: &mut AddressSpace) {
    // DataType
    let name = "BrowsePathResult";
    let node_id = NodeId::new(0, 549);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_51(address_space: &mut AddressSpace) {
    // DataType
    let name = "TranslateBrowsePathsToNodeIdsRequest";
    let node_id = NodeId::new(0, 552);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_52(address_space: &mut AddressSpace) {
    // DataType
    let name = "TranslateBrowsePathsToNodeIdsResponse";
    let node_id = NodeId::new(0, 555);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_53(address_space: &mut AddressSpace) {
    // DataType
    let name = "RegisterNodesRequest";
    let node_id = NodeId::new(0, 558);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_54(address_space: &mut AddressSpace) {
    // DataType
    let name = "RegisterNodesResponse";
    let node_id = NodeId::new(0, 561);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_55(address_space: &mut AddressSpace) {
    // DataType
    let name = "UnregisterNodesRequest";
    let node_id = NodeId::new(0, 564);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_56(address_space: &mut AddressSpace) {
    // DataType
    let name = "UnregisterNodesResponse";
    let node_id = NodeId::new(0, 567);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_57(address_space: &mut AddressSpace) {
    // DataType
    let name = "Counter";
    let node_id = NodeId::new(0, 289);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 7), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_58(address_space: &mut AddressSpace) {
    // DataType
    let name = "NumericRange";
    let node_id = NodeId::new(0, 291);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 12), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_59(address_space: &mut AddressSpace) {
    // DataType
    let name = "Time";
    let node_id = NodeId::new(0, 292);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 12), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_60(address_space: &mut AddressSpace) {
    // DataType
    let name = "Date";
    let node_id = NodeId::new(0, 293);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 13), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_61(address_space: &mut AddressSpace) {
    // DataType
    let name = "EndpointConfiguration";
    let node_id = NodeId::new(0, 331);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_62(address_space: &mut AddressSpace) {
    // DataType
    let name = "QueryDataDescription";
    let node_id = NodeId::new(0, 570);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_63(address_space: &mut AddressSpace) {
    // DataType
    let name = "NodeTypeDescription";
    let node_id = NodeId::new(0, 573);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_64(address_space: &mut AddressSpace) {
    // DataType
    let name = "FilterOperator";
    let node_id = NodeId::new(0, 576);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 7605), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 29), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_65(address_space: &mut AddressSpace) {
    // DataType
    let name = "QueryDataSet";
    let node_id = NodeId::new(0, 577);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_66(address_space: &mut AddressSpace) {
    // DataType
    let name = "NodeReference";
    let node_id = NodeId::new(0, 580);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_67(address_space: &mut AddressSpace) {
    // DataType
    let name = "ContentFilterElement";
    let node_id = NodeId::new(0, 583);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_68(address_space: &mut AddressSpace) {
    // DataType
    let name = "ContentFilter";
    let node_id = NodeId::new(0, 586);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_69(address_space: &mut AddressSpace) {
    // DataType
    let name = "FilterOperand";
    let node_id = NodeId::new(0, 589);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_70(address_space: &mut AddressSpace) {
    // DataType
    let name = "ElementOperand";
    let node_id = NodeId::new(0, 592);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 589), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_71(address_space: &mut AddressSpace) {
    // DataType
    let name = "LiteralOperand";
    let node_id = NodeId::new(0, 595);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 589), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_72(address_space: &mut AddressSpace) {
    // DataType
    let name = "AttributeOperand";
    let node_id = NodeId::new(0, 598);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 589), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_73(address_space: &mut AddressSpace) {
    // DataType
    let name = "SimpleAttributeOperand";
    let node_id = NodeId::new(0, 601);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 589), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_74(address_space: &mut AddressSpace) {
    // DataType
    let name = "ContentFilterElementResult";
    let node_id = NodeId::new(0, 604);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_75(address_space: &mut AddressSpace) {
    // DataType
    let name = "ContentFilterResult";
    let node_id = NodeId::new(0, 607);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_76(address_space: &mut AddressSpace) {
    // DataType
    let name = "ParsingResult";
    let node_id = NodeId::new(0, 610);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_77(address_space: &mut AddressSpace) {
    // DataType
    let name = "QueryFirstRequest";
    let node_id = NodeId::new(0, 613);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_78(address_space: &mut AddressSpace) {
    // DataType
    let name = "QueryFirstResponse";
    let node_id = NodeId::new(0, 616);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_79(address_space: &mut AddressSpace) {
    // DataType
    let name = "QueryNextRequest";
    let node_id = NodeId::new(0, 619);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_80(address_space: &mut AddressSpace) {
    // DataType
    let name = "QueryNextResponse";
    let node_id = NodeId::new(0, 622);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_81(address_space: &mut AddressSpace) {
    // DataType
    let name = "TimestampsToReturn";
    let node_id = NodeId::new(0, 625);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 7606), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 29), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_82(address_space: &mut AddressSpace) {
    // DataType
    let name = "ReadValueId";
    let node_id = NodeId::new(0, 626);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_83(address_space: &mut AddressSpace) {
    // DataType
    let name = "ReadRequest";
    let node_id = NodeId::new(0, 629);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_84(address_space: &mut AddressSpace) {
    // DataType
    let name = "ReadResponse";
    let node_id = NodeId::new(0, 632);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_85(address_space: &mut AddressSpace) {
    // DataType
    let name = "HistoryReadValueId";
    let node_id = NodeId::new(0, 635);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_86(address_space: &mut AddressSpace) {
    // DataType
    let name = "HistoryReadResult";
    let node_id = NodeId::new(0, 638);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_87(address_space: &mut AddressSpace) {
    // DataType
    let name = "HistoryReadDetails";
    let node_id = NodeId::new(0, 641);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_88(address_space: &mut AddressSpace) {
    // DataType
    let name = "ReadEventDetails";
    let node_id = NodeId::new(0, 644);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 641), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_89(address_space: &mut AddressSpace) {
    // DataType
    let name = "ReadRawModifiedDetails";
    let node_id = NodeId::new(0, 647);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 641), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_90(address_space: &mut AddressSpace) {
    // DataType
    let name = "ReadProcessedDetails";
    let node_id = NodeId::new(0, 650);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 641), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_91(address_space: &mut AddressSpace) {
    // DataType
    let name = "ReadAtTimeDetails";
    let node_id = NodeId::new(0, 653);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 641), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_92(address_space: &mut AddressSpace) {
    // DataType
    let name = "HistoryData";
    let node_id = NodeId::new(0, 656);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_93(address_space: &mut AddressSpace) {
    // DataType
    let name = "ModificationInfo";
    let node_id = NodeId::new(0, 11216);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_94(address_space: &mut AddressSpace) {
    // DataType
    let name = "HistoryModifiedData";
    let node_id = NodeId::new(0, 11217);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 656), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_95(address_space: &mut AddressSpace) {
    // DataType
    let name = "HistoryEvent";
    let node_id = NodeId::new(0, 659);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_96(address_space: &mut AddressSpace) {
    // DataType
    let name = "HistoryReadRequest";
    let node_id = NodeId::new(0, 662);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_97(address_space: &mut AddressSpace) {
    // DataType
    let name = "HistoryReadResponse";
    let node_id = NodeId::new(0, 665);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_98(address_space: &mut AddressSpace) {
    // DataType
    let name = "WriteValue";
    let node_id = NodeId::new(0, 668);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_99(address_space: &mut AddressSpace) {
    // DataType
    let name = "WriteRequest";
    let node_id = NodeId::new(0, 671);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_100(address_space: &mut AddressSpace) {
    // DataType
    let name = "WriteResponse";
    let node_id = NodeId::new(0, 674);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

