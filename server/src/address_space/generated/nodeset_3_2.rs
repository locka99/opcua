// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2020 Adam Lock
// This file was autogenerated from Opc.Ua.NodeSet2.Part3.xml by tools/schema/gen_address_space.js
// DO NOT EDIT THIS FILE
#![rustfmt::skip]

#[allow(unused_imports)]
use std::{convert::TryFrom, str::FromStr};

#[allow(unused_imports)]
use crate::{
    address_space::{EventNotifier, types::*},
    prelude::{DataTypeId, ExtensionObject, LocalizedText, NodeId, ReferenceTypeId, service_types::Argument, UAString, Variant}
};

#[allow(unused_variables)]
pub fn populate_address_space(address_space: &mut AddressSpace) {
    add_datatype_1(address_space);
    add_datatype_2(address_space);
    add_datatype_3(address_space);
    add_datatype_4(address_space);
    add_datatype_5(address_space);
    add_datatype_6(address_space);
    add_datatype_7(address_space);
    add_datatype_8(address_space);
    add_datatype_9(address_space);
    add_datatype_10(address_space);
    add_datatype_11(address_space);
    add_datatype_12(address_space);
    add_datatype_13(address_space);
    add_datatype_14(address_space);
    add_datatype_15(address_space);
    add_datatype_16(address_space);
    add_datatype_17(address_space);
    add_datatype_18(address_space);
    add_datatype_19(address_space);
    add_datatype_20(address_space);
    add_datatype_21(address_space);
    add_datatype_22(address_space);
    add_datatype_23(address_space);
    add_datatype_24(address_space);
    add_datatype_25(address_space);
    add_datatype_26(address_space);
    add_datatype_27(address_space);
    add_datatype_28(address_space);
    add_datatype_29(address_space);
    add_datatype_30(address_space);
    add_datatype_31(address_space);
    add_datatype_32(address_space);
    add_datatype_33(address_space);
    add_datatype_34(address_space);
    add_datatype_35(address_space);
    add_datatype_36(address_space);
    add_datatype_37(address_space);
    add_datatype_38(address_space);
    add_datatype_39(address_space);
    add_datatype_40(address_space);
    add_datatype_41(address_space);
    add_datatype_42(address_space);
    add_datatype_43(address_space);
    add_datatype_44(address_space);
    add_datatype_45(address_space);
    add_datatype_46(address_space);
    add_datatype_47(address_space);
    add_referencetype_48(address_space);
    add_referencetype_49(address_space);
    add_referencetype_50(address_space);
    add_referencetype_51(address_space);
    add_referencetype_52(address_space);
    add_referencetype_53(address_space);
    add_referencetype_54(address_space);
    add_referencetype_55(address_space);
    add_referencetype_56(address_space);
    add_referencetype_57(address_space);
    add_referencetype_58(address_space);
    add_referencetype_59(address_space);
    add_referencetype_60(address_space);
    add_referencetype_61(address_space);
    add_referencetype_62(address_space);
    add_referencetype_63(address_space);
    add_referencetype_64(address_space);
    add_referencetype_65(address_space);
    add_referencetype_66(address_space);
    add_referencetype_67(address_space);
    add_variable_68(address_space);
    add_variable_69(address_space);
    add_variable_70(address_space);
    add_variable_71(address_space);
    add_variable_72(address_space);
    add_variable_73(address_space);
    add_variable_74(address_space);
    add_variable_75(address_space);
    add_variable_76(address_space);
    add_variable_77(address_space);
    add_variable_78(address_space);
    add_variable_79(address_space);
    add_variable_80(address_space);
    add_variable_81(address_space);
    add_variable_82(address_space);
    add_variable_83(address_space);
    add_variable_84(address_space);
    add_variable_85(address_space);
    add_variable_86(address_space);
    add_variable_87(address_space);
    add_variable_88(address_space);
    add_variable_89(address_space);
    add_variable_90(address_space);
    add_variable_91(address_space);
    add_variable_92(address_space);
    add_variable_93(address_space);
    add_variable_94(address_space);
}

fn add_datatype_1(address_space: &mut AddressSpace) {
    // DataType
    let name = "Decimal";
    let node_id = NodeId::new(0, 50);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 26), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_2(address_space: &mut AddressSpace) {
    // DataType
    let name = "NamingRuleType";
    let node_id = NodeId::new(0, 120);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 12169), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 29), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_3(address_space: &mut AddressSpace) {
    // DataType
    let name = "ImageBMP";
    let node_id = NodeId::new(0, 2000);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 30), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_4(address_space: &mut AddressSpace) {
    // DataType
    let name = "ImageGIF";
    let node_id = NodeId::new(0, 2001);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 30), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_5(address_space: &mut AddressSpace) {
    // DataType
    let name = "ImageJPG";
    let node_id = NodeId::new(0, 2002);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 30), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_6(address_space: &mut AddressSpace) {
    // DataType
    let name = "ImagePNG";
    let node_id = NodeId::new(0, 2003);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 30), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_7(address_space: &mut AddressSpace) {
    // DataType
    let name = "AudioDataType";
    let node_id = NodeId::new(0, 16307);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 15), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_8(address_space: &mut AddressSpace) {
    // DataType
    let name = "DecimalDataType";
    let node_id = NodeId::new(0, 17861);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_9(address_space: &mut AddressSpace) {
    // DataType
    let name = "IdType";
    let node_id = NodeId::new(0, 256);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 7591), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 29), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_10(address_space: &mut AddressSpace) {
    // DataType
    let name = "NodeClass";
    let node_id = NodeId::new(0, 257);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 11878), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 29), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_11(address_space: &mut AddressSpace) {
    // DataType
    let name = "PermissionType";
    let node_id = NodeId::new(0, 94);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 15030), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 7), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_12(address_space: &mut AddressSpace) {
    // DataType
    let name = "AccessLevelType";
    let node_id = NodeId::new(0, 15031);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 15032), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 3), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_13(address_space: &mut AddressSpace) {
    // DataType
    let name = "AccessLevelExType";
    let node_id = NodeId::new(0, 15406);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 15407), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 7), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_14(address_space: &mut AddressSpace) {
    // DataType
    let name = "EventNotifierType";
    let node_id = NodeId::new(0, 15033);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 15034), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 3), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_15(address_space: &mut AddressSpace) {
    // DataType
    let name = "AccessRestrictionType";
    let node_id = NodeId::new(0, 95);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 15035), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 7), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_16(address_space: &mut AddressSpace) {
    // DataType
    let name = "RolePermissionType";
    let node_id = NodeId::new(0, 96);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_17(address_space: &mut AddressSpace) {
    // DataType
    let name = "DataTypeDefinition";
    let node_id = NodeId::new(0, 97);
    let node = DataType::new(&node_id, name, name, true);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_18(address_space: &mut AddressSpace) {
    // DataType
    let name = "StructureType";
    let node_id = NodeId::new(0, 98);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 14528), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 29), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_19(address_space: &mut AddressSpace) {
    // DataType
    let name = "StructureField";
    let node_id = NodeId::new(0, 101);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_20(address_space: &mut AddressSpace) {
    // DataType
    let name = "StructureDefinition";
    let node_id = NodeId::new(0, 99);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 97), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_21(address_space: &mut AddressSpace) {
    // DataType
    let name = "EnumDefinition";
    let node_id = NodeId::new(0, 100);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 97), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_22(address_space: &mut AddressSpace) {
    // DataType
    let name = "Node";
    let node_id = NodeId::new(0, 258);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_23(address_space: &mut AddressSpace) {
    // DataType
    let name = "InstanceNode";
    let node_id = NodeId::new(0, 11879);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 258), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_24(address_space: &mut AddressSpace) {
    // DataType
    let name = "TypeNode";
    let node_id = NodeId::new(0, 11880);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 258), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_25(address_space: &mut AddressSpace) {
    // DataType
    let name = "ObjectNode";
    let node_id = NodeId::new(0, 261);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 11879), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_26(address_space: &mut AddressSpace) {
    // DataType
    let name = "ObjectTypeNode";
    let node_id = NodeId::new(0, 264);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 11880), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_27(address_space: &mut AddressSpace) {
    // DataType
    let name = "VariableNode";
    let node_id = NodeId::new(0, 267);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 11879), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_28(address_space: &mut AddressSpace) {
    // DataType
    let name = "VariableTypeNode";
    let node_id = NodeId::new(0, 270);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 11880), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_29(address_space: &mut AddressSpace) {
    // DataType
    let name = "ReferenceTypeNode";
    let node_id = NodeId::new(0, 273);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 11880), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_30(address_space: &mut AddressSpace) {
    // DataType
    let name = "MethodNode";
    let node_id = NodeId::new(0, 276);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 11879), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_31(address_space: &mut AddressSpace) {
    // DataType
    let name = "ViewNode";
    let node_id = NodeId::new(0, 279);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 11879), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_32(address_space: &mut AddressSpace) {
    // DataType
    let name = "DataTypeNode";
    let node_id = NodeId::new(0, 282);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 11880), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_33(address_space: &mut AddressSpace) {
    // DataType
    let name = "ReferenceNode";
    let node_id = NodeId::new(0, 285);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_34(address_space: &mut AddressSpace) {
    // DataType
    let name = "Argument";
    let node_id = NodeId::new(0, 296);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_35(address_space: &mut AddressSpace) {
    // DataType
    let name = "EnumValueType";
    let node_id = NodeId::new(0, 7594);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_36(address_space: &mut AddressSpace) {
    // DataType
    let name = "EnumField";
    let node_id = NodeId::new(0, 102);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 7594), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_37(address_space: &mut AddressSpace) {
    // DataType
    let name = "OptionSet";
    let node_id = NodeId::new(0, 12755);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_38(address_space: &mut AddressSpace) {
    // DataType
    let name = "Union";
    let node_id = NodeId::new(0, 12756);
    let node = DataType::new(&node_id, name, name, true);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_39(address_space: &mut AddressSpace) {
    // DataType
    let name = "NormalizedString";
    let node_id = NodeId::new(0, 12877);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 12), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_40(address_space: &mut AddressSpace) {
    // DataType
    let name = "DecimalString";
    let node_id = NodeId::new(0, 12878);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 12), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_41(address_space: &mut AddressSpace) {
    // DataType
    let name = "DurationString";
    let node_id = NodeId::new(0, 12879);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 12), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_42(address_space: &mut AddressSpace) {
    // DataType
    let name = "TimeString";
    let node_id = NodeId::new(0, 12880);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 12), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_43(address_space: &mut AddressSpace) {
    // DataType
    let name = "DateString";
    let node_id = NodeId::new(0, 12881);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 12), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_44(address_space: &mut AddressSpace) {
    // DataType
    let name = "Duration";
    let node_id = NodeId::new(0, 290);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 11), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_45(address_space: &mut AddressSpace) {
    // DataType
    let name = "UtcTime";
    let node_id = NodeId::new(0, 294);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 13), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_46(address_space: &mut AddressSpace) {
    // DataType
    let name = "LocaleId";
    let node_id = NodeId::new(0, 295);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 12), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_datatype_47(address_space: &mut AddressSpace) {
    // DataType
    let name = "TimeZoneDataType";
    let node_id = NodeId::new(0, 8912);
    let node = DataType::new(&node_id, name, name, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 22), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_referencetype_48(address_space: &mut AddressSpace) {
    // ReferenceType
    let name = "References";
    let node_id = NodeId::new(0, 31);
    let node = ReferenceType::new(&node_id, name, name, None, true, true);
    let _ = address_space.insert::<ReferenceType, ReferenceTypeId>(node, None);
}

fn add_referencetype_49(address_space: &mut AddressSpace) {
    // ReferenceType
    let name = "NonHierarchicalReferences";
    let node_id = NodeId::new(0, 32);
    let node = ReferenceType::new(&node_id, name, name, Some(LocalizedText::new("", "NonHierarchicalReferences")), false, true);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 31), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_referencetype_50(address_space: &mut AddressSpace) {
    // ReferenceType
    let name = "HierarchicalReferences";
    let node_id = NodeId::new(0, 33);
    let node = ReferenceType::new(&node_id, name, name, Some(LocalizedText::new("", "HierarchicalReferences")), false, true);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 31), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_referencetype_51(address_space: &mut AddressSpace) {
    // ReferenceType
    let name = "HasChild";
    let node_id = NodeId::new(0, 34);
    let node = ReferenceType::new(&node_id, name, name, Some(LocalizedText::new("", "ChildOf")), false, true);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 33), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_referencetype_52(address_space: &mut AddressSpace) {
    // ReferenceType
    let name = "Organizes";
    let node_id = NodeId::new(0, 35);
    let node = ReferenceType::new(&node_id, name, name, Some(LocalizedText::new("", "OrganizedBy")), false, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 33), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_referencetype_53(address_space: &mut AddressSpace) {
    // ReferenceType
    let name = "HasEventSource";
    let node_id = NodeId::new(0, 36);
    let node = ReferenceType::new(&node_id, name, name, Some(LocalizedText::new("", "EventSourceOf")), false, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 33), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_referencetype_54(address_space: &mut AddressSpace) {
    // ReferenceType
    let name = "HasModellingRule";
    let node_id = NodeId::new(0, 37);
    let node = ReferenceType::new(&node_id, name, name, Some(LocalizedText::new("", "ModellingRuleOf")), false, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 32), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_referencetype_55(address_space: &mut AddressSpace) {
    // ReferenceType
    let name = "HasEncoding";
    let node_id = NodeId::new(0, 38);
    let node = ReferenceType::new(&node_id, name, name, Some(LocalizedText::new("", "EncodingOf")), false, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 32), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_referencetype_56(address_space: &mut AddressSpace) {
    // ReferenceType
    let name = "HasDescription";
    let node_id = NodeId::new(0, 39);
    let node = ReferenceType::new(&node_id, name, name, Some(LocalizedText::new("", "DescriptionOf")), false, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 32), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_referencetype_57(address_space: &mut AddressSpace) {
    // ReferenceType
    let name = "HasTypeDefinition";
    let node_id = NodeId::new(0, 40);
    let node = ReferenceType::new(&node_id, name, name, Some(LocalizedText::new("", "TypeDefinitionOf")), false, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 32), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_referencetype_58(address_space: &mut AddressSpace) {
    // ReferenceType
    let name = "GeneratesEvent";
    let node_id = NodeId::new(0, 41);
    let node = ReferenceType::new(&node_id, name, name, Some(LocalizedText::new("", "GeneratedBy")), false, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 32), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_referencetype_59(address_space: &mut AddressSpace) {
    // ReferenceType
    let name = "AlwaysGeneratesEvent";
    let node_id = NodeId::new(0, 3065);
    let node = ReferenceType::new(&node_id, name, name, Some(LocalizedText::new("", "AlwaysGeneratedBy")), false, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 41), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_referencetype_60(address_space: &mut AddressSpace) {
    // ReferenceType
    let name = "Aggregates";
    let node_id = NodeId::new(0, 44);
    let node = ReferenceType::new(&node_id, name, name, Some(LocalizedText::new("", "AggregatedBy")), false, true);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 34), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_referencetype_61(address_space: &mut AddressSpace) {
    // ReferenceType
    let name = "HasSubtype";
    let node_id = NodeId::new(0, 45);
    let node = ReferenceType::new(&node_id, name, name, Some(LocalizedText::new("", "SubtypeOf")), false, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 34), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_referencetype_62(address_space: &mut AddressSpace) {
    // ReferenceType
    let name = "HasProperty";
    let node_id = NodeId::new(0, 46);
    let node = ReferenceType::new(&node_id, name, name, Some(LocalizedText::new("", "PropertyOf")), false, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 44), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_referencetype_63(address_space: &mut AddressSpace) {
    // ReferenceType
    let name = "HasComponent";
    let node_id = NodeId::new(0, 47);
    let node = ReferenceType::new(&node_id, name, name, Some(LocalizedText::new("", "ComponentOf")), false, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 44), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_referencetype_64(address_space: &mut AddressSpace) {
    // ReferenceType
    let name = "HasNotifier";
    let node_id = NodeId::new(0, 48);
    let node = ReferenceType::new(&node_id, name, name, Some(LocalizedText::new("", "NotifierOf")), false, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 36), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_referencetype_65(address_space: &mut AddressSpace) {
    // ReferenceType
    let name = "HasOrderedComponent";
    let node_id = NodeId::new(0, 49);
    let node = ReferenceType::new(&node_id, name, name, Some(LocalizedText::new("", "OrderedComponentOf")), false, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 47), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_referencetype_66(address_space: &mut AddressSpace) {
    // ReferenceType
    let name = "HasArgumentDescription";
    let node_id = NodeId::new(0, 129);
    let node = ReferenceType::new(&node_id, name, name, Some(LocalizedText::new("", "ArgumentDescriptionOf")), false, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 47), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_referencetype_67(address_space: &mut AddressSpace) {
    // ReferenceType
    let name = "HasOptionalInputArgumentDescription";
    let node_id = NodeId::new(0, 131);
    let node = ReferenceType::new(&node_id, name, name, Some(LocalizedText::new("", "OptionalInputArgumentDescriptionOf")), false, false);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 129), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_68(address_space: &mut AddressSpace) {
    // Variable
    let name = "EnumValues";
    let value = Variant::Empty;
    let node_id = NodeId::new(0, 12169);
    let node = Variable::new_data_value(&node_id, name, name, NodeId::new(0, 7594), Some(1), Some(0), value);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 120), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_69(address_space: &mut AddressSpace) {
    // Variable
    let name = "NodeVersion";
    let value = Variant::Empty;
    let node_id = NodeId::new(0, 3068);
    let node = Variable::new_data_value(&node_id, name, name, NodeId::new(0, 12), Some(-2), None, value);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_variable_70(address_space: &mut AddressSpace) {
    // Variable
    let name = "ViewVersion";
    let value = Variant::Empty;
    let node_id = NodeId::new(0, 12170);
    let node = Variable::new_data_value(&node_id, name, name, NodeId::new(0, 7), Some(-2), None, value);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_variable_71(address_space: &mut AddressSpace) {
    // Variable
    let name = "Icon";
    let value = Variant::Empty;
    let node_id = NodeId::new(0, 3067);
    let node = Variable::new_data_value(&node_id, name, name, NodeId::new(0, 30), Some(-2), None, value);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_variable_72(address_space: &mut AddressSpace) {
    // Variable
    let name = "LocalTime";
    let value = Variant::Empty;
    let node_id = NodeId::new(0, 3069);
    let node = Variable::new_data_value(&node_id, name, name, NodeId::new(0, 8912), Some(-2), None, value);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_variable_73(address_space: &mut AddressSpace) {
    // Variable
    let name = "AllowNulls";
    let value = Variant::Empty;
    let node_id = NodeId::new(0, 3070);
    let node = Variable::new_data_value(&node_id, name, name, NodeId::new(0, 1), Some(-2), None, value);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_variable_74(address_space: &mut AddressSpace) {
    // Variable
    let name = "ValueAsText";
    let value = Variant::Empty;
    let node_id = NodeId::new(0, 11433);
    let node = Variable::new_data_value(&node_id, name, name, NodeId::new(0, 21), Some(-2), None, value);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_variable_75(address_space: &mut AddressSpace) {
    // Variable
    let name = "MaxStringLength";
    let value = Variant::Empty;
    let node_id = NodeId::new(0, 11498);
    let node = Variable::new_data_value(&node_id, name, name, NodeId::new(0, 7), Some(-2), None, value);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_variable_76(address_space: &mut AddressSpace) {
    // Variable
    let name = "MaxCharacters";
    let value = Variant::Empty;
    let node_id = NodeId::new(0, 15002);
    let node = Variable::new_data_value(&node_id, name, name, NodeId::new(0, 7), Some(-2), None, value);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_variable_77(address_space: &mut AddressSpace) {
    // Variable
    let name = "MaxByteStringLength";
    let value = Variant::Empty;
    let node_id = NodeId::new(0, 12908);
    let node = Variable::new_data_value(&node_id, name, name, NodeId::new(0, 7), Some(-2), None, value);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_variable_78(address_space: &mut AddressSpace) {
    // Variable
    let name = "MaxArrayLength";
    let value = Variant::Empty;
    let node_id = NodeId::new(0, 11512);
    let node = Variable::new_data_value(&node_id, name, name, NodeId::new(0, 7), Some(-2), None, value);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_variable_79(address_space: &mut AddressSpace) {
    // Variable
    let name = "EngineeringUnits";
    let value = Variant::Empty;
    let node_id = NodeId::new(0, 11513);
    let node = Variable::new_data_value(&node_id, name, name, NodeId::new(0, 887), Some(-2), None, value);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_variable_80(address_space: &mut AddressSpace) {
    // Variable
    let name = "EnumStrings";
    let value = Variant::Empty;
    let node_id = NodeId::new(0, 11432);
    let node = Variable::new_data_value(&node_id, name, name, NodeId::new(0, 21), Some(1), Some(0), value);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_variable_81(address_space: &mut AddressSpace) {
    // Variable
    let name = "EnumValues";
    let value = Variant::Empty;
    let node_id = NodeId::new(0, 3071);
    let node = Variable::new_data_value(&node_id, name, name, NodeId::new(0, 7594), Some(1), Some(0), value);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_variable_82(address_space: &mut AddressSpace) {
    // Variable
    let name = "OptionSetValues";
    let value = Variant::Empty;
    let node_id = NodeId::new(0, 12745);
    let node = Variable::new_data_value(&node_id, name, name, NodeId::new(0, 21), Some(1), Some(0), value);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_variable_83(address_space: &mut AddressSpace) {
    // Variable
    let name = "InputArguments";
    let value = Variant::Empty;
    let node_id = NodeId::new(0, 3072);
    let node = Variable::new_data_value(&node_id, name, name, NodeId::new(0, 296), Some(1), Some(0), value);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_variable_84(address_space: &mut AddressSpace) {
    // Variable
    let name = "OutputArguments";
    let value = Variant::Empty;
    let node_id = NodeId::new(0, 3073);
    let node = Variable::new_data_value(&node_id, name, name, NodeId::new(0, 296), Some(1), Some(0), value);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_variable_85(address_space: &mut AddressSpace) {
    // Variable
    let name = "DefaultInputValues";
    let value = Variant::Empty;
    let node_id = NodeId::new(0, 16306);
    let node = Variable::new_data_value(&node_id, name, name, DataTypeId::Boolean, Some(1), Some(0), value);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_variable_86(address_space: &mut AddressSpace) {
    // Variable
    let name = "DefaultInstanceBrowseName";
    let value = Variant::Empty;
    let node_id = NodeId::new(0, 17605);
    let node = Variable::new_data_value(&node_id, name, name, NodeId::new(0, 20), None, None, value);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_variable_87(address_space: &mut AddressSpace) {
    // Variable
    let name = "EnumStrings";
    let value = Variant::Empty;
    let node_id = NodeId::new(0, 7591);
    let node = Variable::new_data_value(&node_id, name, name, NodeId::new(0, 21), Some(1), Some(0), value);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 256), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_88(address_space: &mut AddressSpace) {
    // Variable
    let name = "EnumValues";
    let value = Variant::Empty;
    let node_id = NodeId::new(0, 11878);
    let node = Variable::new_data_value(&node_id, name, name, NodeId::new(0, 7594), Some(1), Some(0), value);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 257), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_89(address_space: &mut AddressSpace) {
    // Variable
    let name = "OptionSetValues";
    let value = Variant::Empty;
    let node_id = NodeId::new(0, 15030);
    let node = Variable::new_data_value(&node_id, name, name, NodeId::new(0, 21), Some(1), Some(0), value);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 94), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_90(address_space: &mut AddressSpace) {
    // Variable
    let name = "OptionSetValues";
    let value = Variant::Empty;
    let node_id = NodeId::new(0, 15032);
    let node = Variable::new_data_value(&node_id, name, name, NodeId::new(0, 21), Some(1), Some(0), value);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 15031), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_91(address_space: &mut AddressSpace) {
    // Variable
    let name = "OptionSetValues";
    let value = Variant::Empty;
    let node_id = NodeId::new(0, 15407);
    let node = Variable::new_data_value(&node_id, name, name, NodeId::new(0, 21), Some(1), Some(0), value);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 15406), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_92(address_space: &mut AddressSpace) {
    // Variable
    let name = "OptionSetValues";
    let value = Variant::Empty;
    let node_id = NodeId::new(0, 15034);
    let node = Variable::new_data_value(&node_id, name, name, NodeId::new(0, 21), Some(1), Some(0), value);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 15033), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_93(address_space: &mut AddressSpace) {
    // Variable
    let name = "OptionSetValues";
    let value = Variant::Empty;
    let node_id = NodeId::new(0, 15035);
    let node = Variable::new_data_value(&node_id, name, name, NodeId::new(0, 21), Some(1), Some(0), value);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 95), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_94(address_space: &mut AddressSpace) {
    // Variable
    let name = "EnumStrings";
    let value = Variant::Empty;
    let node_id = NodeId::new(0, 14528);
    let node = Variable::new_data_value(&node_id, name, name, NodeId::new(0, 21), Some(1), Some(0), value);
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(0, 98), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

