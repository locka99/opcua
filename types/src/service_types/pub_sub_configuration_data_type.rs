// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2020 Adam Lock

// This file was autogenerated from Opc.Ua.Types.bsd.xml by tools/schema/gen_types.js
// DO NOT EDIT THIS FILE

use std::io::{Read, Write};

#[allow(unused_imports)]
use crate::{
    basic_types::*, encoding::*, node_ids::ObjectId, service_types::impls::MessageInfo,
    service_types::PubSubConnectionDataType, service_types::PublishedDataSetDataType,
};

#[derive(Debug, Clone, PartialEq)]
pub struct PubSubConfigurationDataType {
    pub published_data_sets: Option<Vec<PublishedDataSetDataType>>,
    pub connections: Option<Vec<PubSubConnectionDataType>>,
    pub enabled: bool,
}

impl MessageInfo for PubSubConfigurationDataType {
    fn object_id(&self) -> ObjectId {
        ObjectId::PubSubConfigurationDataType_Encoding_DefaultBinary
    }
}

impl BinaryEncoder<PubSubConfigurationDataType> for PubSubConfigurationDataType {
    fn byte_len(&self) -> usize {
        let mut size = 0;
        size += byte_len_array(&self.published_data_sets);
        size += byte_len_array(&self.connections);
        size += self.enabled.byte_len();
        size
    }

    #[allow(unused_variables)]
    fn encode<S: Write>(&self, stream: &mut S) -> EncodingResult<usize> {
        let mut size = 0;
        size += write_array(stream, &self.published_data_sets)?;
        size += write_array(stream, &self.connections)?;
        size += self.enabled.encode(stream)?;
        Ok(size)
    }

    #[allow(unused_variables)]
    fn decode<S: Read>(
        stream: &mut S,
        decoding_limits: &DecodingLimits,
    ) -> EncodingResult<Self> {
        let published_data_sets: Option<Vec<PublishedDataSetDataType>> =
            read_array(stream, decoding_limits)?;
        let connections: Option<Vec<PubSubConnectionDataType>> =
            read_array(stream, decoding_limits)?;
        let enabled = bool::decode(stream, decoding_limits)?;
        Ok(PubSubConfigurationDataType {
            published_data_sets,
            connections,
            enabled,
        })
    }
}
