// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2020 Adam Lock

// This file was autogenerated from Opc.Ua.Types.bsd.xml by tools/schema/gen_types.js
// DO NOT EDIT THIS FILE
#![rustfmt::skip]

use std::io::{Read, Write};

#[allow(unused_imports)]
use crate::{
    encoding::*,
    basic_types::*,
    service_types::impls::MessageInfo,
    node_ids::ObjectId,
    node_id::NodeId,
    string::UAString,
    qualified_name::QualifiedName,
};

#[derive(Debug, Clone, PartialEq, Serialize)]
pub struct ReadValueId {
    pub node_id: NodeId,
    pub attribute_id: u32,
    pub index_range: UAString,
    pub data_encoding: QualifiedName,
}

impl MessageInfo for ReadValueId {
    fn object_id(&self) -> ObjectId {
        ObjectId::ReadValueId_Encoding_DefaultBinary
    }
}

impl BinaryEncoder<ReadValueId> for ReadValueId {
    fn byte_len(&self) -> usize {
        let mut size = 0;
        size += self.node_id.byte_len();
        size += self.attribute_id.byte_len();
        size += self.index_range.byte_len();
        size += self.data_encoding.byte_len();
        size
    }

    #[allow(unused_variables)]
    fn encode<S: Write>(&self, stream: &mut S) -> EncodingResult<usize> {
        let mut size = 0;
        size += self.node_id.encode(stream)?;
        size += self.attribute_id.encode(stream)?;
        size += self.index_range.encode(stream)?;
        size += self.data_encoding.encode(stream)?;
        Ok(size)
    }

    #[allow(unused_variables)]
    fn decode<S: Read>(stream: &mut S, decoding_limits: &DecodingLimits) -> EncodingResult<Self> {
        let node_id = NodeId::decode(stream, decoding_limits)?;
        let attribute_id = u32::decode(stream, decoding_limits)?;
        let index_range = UAString::decode(stream, decoding_limits)?;
        let data_encoding = QualifiedName::decode(stream, decoding_limits)?;
        Ok(ReadValueId {
            node_id,
            attribute_id,
            index_range,
            data_encoding,
        })
    }
}
